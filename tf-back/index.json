{"project": "tensorflow", "project_url": "https://www.tensorflow.org/", "show_commit_url": "https://github.com/tensorflow/tensorflow/commit/", "hash_length": 8, "revision_to_hash": {"19": "b2dc60eaa9c00421293b87824a2047fdcf6fa331", "276": "8242b4dd1b36440e191fef8a07b6f37d8bcee60d", "2079": "09e2e823bdbcb86542acef851c42754578be3f6c", "2335": "d0db73a0648e3f1e8367606225e4df2f0d34d0c0", "2580": "028d0b46004c921acd48fdd0ec18128d79e18bf4", "4563": "31ea3dbf57d67b32ca1708e7d8cd5fb43e7810b1", "4932": "4b7bc3174ed67b4a0eb1803537c9d00f132e9ae7", "6517": "9425f822d8a5dc657022eed5c5142b4bf7b1087a", "7350": "25023dffcf88f46777b5ddab457ac84a5bed5d2f", "8713": "3cb39956e622b322e43547cf2b6e337020643f21", "10330": "c715c3102df1556fc0ce88fc987440a3c80e5380", "11537": "2dea76c0b8eb5b8302454137c055f9e7b7dcea39", "12715": "671f4c6519b4d82d3e97ab96825e0a748fae8e5d", "13320": "b5943bd1bcaa1510ab035a82f20adb6f7b2f7b05", "13922": "282823b877f173e6a33bbc9d4b9ad7dd8413ada6", "14978": "48408fc0e26669998cdb7f28604d163b0feb8130", "15826": "68322a636fdcd8cbc6548d103a0cf82667b7c8b1", "16263": "c62a66bcd4d6f009e0b416055e2ecb8ef50fd0aa", "16496": "4d924e796368163eff11a8151e8505715345f58d", "16923": "9937f8c6459c18529b31e50262726a8b40c12a7a", "17923": "0174cb2541b540653859399491ff9c2192a3d29d", "18595": "114a4627cb4b05dacb3228d5815a8dac30ddb07a", "19193": "1536a84f32f1fe77efd3fee6e5933a1dfe4e10bb", "19471": "07bb8ea2379bd459832b23951fb20ec47f3fdbd4", "21030": "e895d5ca395c2362df4f5c8f08b68501b41f8a98", "22171": "a23f5d7f7757623a4ea8c6e1d743d178a0c561c5", "22967": "efe5376f3dec8fcc2bf3299a4ff4df6ad3591c88", "23663": "4019c5837d21aee67e7365ae579bfd04c7ec6f88", "24097": "1ec6ed51182adf8f1b03a3188c16cd8a45ca6c85", "26244": "c462db435a45ec173c9e0fd946ce8e6d09b7d192", "26808": "636367bba8ceddc456419b0278e8c7655ea97edd", "27441": "ce1d6ec49bb0aea2ee2e5bd90e424345e6846fc8", "28445": "12f033df4c8fa3feb88ce936eb1581eaa92b303e", "29612": "b4957ffc69e73cf8348db7f381438c3b0ccabd14", "30888": "181971fd1dfc01730ce8b2aa74d90553709ee61d", "31537": "6f0d70e7c0e63c15020d889e5b63e0438e14d3b3", "32169": "2784b1c4318add93d9cc9d1877962fed75ef604b", "33312": "9e76bf324f6bac63137a02bb6e6ec9120703ea9b", "36492": "48c54eee17b35ebc15e274e36632eccb76072f7d", "37669": "5a944dc4f46edd464d8e645956d3a4f653f0d14e", "38452": "358298a3c25e0736a408cac8ae46fb198ec397c3", "39324": "d752244fbaad5e4268243355046d30990f59418f", "42850": "438604fc885208ee05f9eef2d0f2c630e1360a83", "44785": "622487f55481fd914bbf8f340c44ff2bb1d059de", "45641": "b1f157f4d2d871f7a6d8eeb21fddf97b5216608a", "46933": "37aa430d84ced579342a4044c89c236664be7f68", "48135": "aaf367ed8ed416f9a86674bf1ddd660c11609e63", "49003": "b2a0f1c45b2283910548ebd88ee5aaf4b6fc6077", "50177": "d2e24b6039433bd83478da8c8c2d6c58034be607", "51264": "9af25bb2a76b0e5607acecaa93ae421352a70748", "51951": "6a1ec9deeb2b04dc698db385ea582f6949b4f8bc", "52011": "e79eb0b8de130bf905a101608681e9c18561356c", "52774": "024aecf414941e11eb643e29ceed3e1c47a115ad", "54090": "3970b47da568a783818f43ec9f8df5acf692fe7c", "55079": "cf9afc9467b12013d93c4fe779c4158944c85e93", "55960": "93bc2e2072e0daccbcff7a90d397b704a9e8f778", "55988": "fa1db5eb0da85b5baccc2a46d534fdeb3bb473d0", "56550": "c8137f3a8e1a22b6e274d0ffc84013624523df59", "59186": "e1436b2952c7600c8ac88114210381db0398be16", "59902": "17d6639b550cdcedf31ee01bd6eb26c592aeac42", "61943": "16a965c5c9a64ef82ccfcb849dd61e6aad00d10e", "62467": "25c197e02393bd44f50079945409009dd4d434f8", "64231": "f2e8ef305e90151dfd3092a77880c9d046878ef8", "65243": "e5e9a8f4e97e6910cac46d84966ed82de2ec21b3", "66301": "656e7a2b347c3c6eb76a6c130ed4b1def567b6c1", "68638": "4dcfddc5d12018a5a0fdca652b9221ed95e9eb23", "70966": "1e438195399650604fb3aa3a53c67339f1167882", "71435": "e4c4b20805064c67ea624cdedf3f295ea1ee800d", "72063": "b903b819d396ced0f0ad83726eae1db5f216de80", "72746": "c19e29306ce1777456b2dbb3a14f511edf7883a8", "74412": "1a6dea36de673139af3ccb3728535f024436fc5d", "75796": "7b081981131bf6da32065b8ecc3b8c5bd1280c4a", "77175": "748435b8ef55a554e011e97a9f893304e737775a", "77928": "a6d8ffae097d0132989ae4688d224121ec6d8f35", "88567": "a8e5c41c5bbe684a88b9285e07bd9838c089e83b", "91103": "63c13ff9b330682d136bc9219fa658f589b639f4", "92401": "c865ec5621c013a7f8a4a26d380782e63117224f", "93927": "6612da89516247503f03ef76e974b51a434fb52e", "95553": "2c319fb415a5c91ed7c0b81af72df410a69b8576", "102693": "c20310273f663b1dbf9ca9e68068784d44a95ae2", "102709": "6b634657d8ff1355132c3838271e4f569d1ffaba", "106284": "f5ce1c00d4397875ff3d706881bd46430f4a9667", "107747": "f59745a38177bbc6f52a84af3a8a6d5c323d6db0", "107868": "648ea74ea01deda6f13db83770564a2660d15925", "108374": "8e423e3d56390671f0d954c90f4fd163ab02a9c1", "108801": "87989f69597d6b2d60de8f112e1e3cea23be7298", "109181": "5b900cfe4b3b848f577315a0dde09a729f770e95", "111426": "04256c89d8783c5cfd7e550f9512e9478beb6454", "115666": "c75bb66a99ad45e5a3c9fc4625c8abeb705520b5", "117179": "a0163a0a727c9c7af5ac976debd5e28d42275b8c", "117508": "f03fe1bf795061408fafda9704c485aea7bddde2", "117906": "ea930781c3164c9646e26cf3716f86804aa65b63", "118386": "2646d230746240eb52312aab3cceeeb7df33e380", "119161": "64c3d382cadf7bbe8e7e99884bede8284ff67f56", "119294": "5adb433d781597468ca8eba66a0d2466b2aff10c", "119959": "38ea9bbfea423eb968fcc70bc454471277c9537c", "120622": "590d6eef7e91a6a7392c8ffffb7b58f2e0c8bc6b", "124541": "c6daad319d78e08d2dacbc4aa58094ce541188cf", "125680": "064e1535a7ba3cb9f67b9d9171309a1e9ebca2b0", "126831": "9837eceb39171aba9e28dc1f120f53271b6b1ef0", "127737": "e5bf8de410005de06a7ff5393fafdf832ef1d4ad", "129321": "765ac8d16eff6d6ff997ee73809b402d8b1194ae", "129608": "5d80e1e8e6ee999be7db39461e0e79c90403a2e4", "133806": "3c1e8c03419266bb6ba379d303d3e03a380617a8", "134632": "acf4951a2f5fdc181ed14c163381c0cf135d9ee6", "135373": "e6e5d6df2ab26620548f35bf2e652b19f6d06652", "136809": "aad398b5e9eb8c617f2b70e16166bb2b797be10a", "138423": "70087ab4f46a4bebaacce1023cd12bd9c655e159", "139025": "2b96f3662bd776e277f86997659e61046b56c315", "139623": "2c2fdd3205a8d31e5f09a71ac7eb52b8c0294a60", "139776": "3ffdb91f122f556a74a6e1efd2469bfe1063cb5c", "139858": "4386a6640c9fb65503750c37714971031f3dc1fd", "143553": "99fea8da0d98fb271b60b58cfa5755f2bd430079", "144516": "14b2d686d68696f90dbd08564b11af04066ce291", "145574": "bb3c460114b13fda5c730fe43587b8e8c2243cd7", "146246": "b36436b087bd8e8701ef51718179037cccdfc26e", "151682": "df8c55ce12b5cfc6f29b01889f7773911a75e6ef", "151684": "295ad2781683835be974faba0a191528d8079768", "151687": "25fba035f3e453d94490932096282c7b0624bbb3", "151688": "fcc4b966f1265f466e82617020af93670141b009", "151913": "ab35f2bf7132f9d20a0bea9a5d1849862737d4b4", "155079": "5e5730ba9d15a3b328d2b20a01bf8a9762f3711c", "155544": "ef82f4c66cae4a719a3815c307061a941a88b206", "156293": "0b06f2927be226ffe44f47bfa9e03e4ea649d7f3", "156796": "68f236364cdd261754c68782d99ec2fc791922e6", "157465": "97c3fef64ba9937a52af2d72fb4104b6e541d4b2", "158146": "582c8d236cb079023657287c318ff26adb239002", "159224": "3db52be7be81a87c623cdeb7f03d3767521c5246", "159225": "cdf2c541c3dd3fb6d03cce4d23fc6c548bc9017c", "159226": "77f47d6ed6ca1f50b6f2c4919097e625d50398a9", "159227": "d745ff2a48cebf18e847e8b602a744e97e058946", "159228": "9edbe5075f79a4a95ed14a2be831f9b59e61f49d", "160438": "85c8b2a817f95a3e979ecd1ed95bff1dc1335cff", "165819": "a8b6d5ff93a37ccba92137e1cab2ae2ee6640ad6", "166529": "0d1805aede03d25aa9d49adcef6903535fa5ad14", "167525": "e0b8bbee7a66d5afa8b309a06fbfb61b4169266f", "168105": "fcdf659347024dc5a3130e866ba3dde10bac72b0", "168847": "a4dfb8d1a71385bd6d122e4f27f86dcebb96712d", "171407": "3929ffacfbef7c431e8397920d040aaf47acff19", "171594": "0931ea3d985bb9c8fdd054a5e29c4129623c849b", "171777": "cfe0c80169ae984bcdc99ff6de7444164aaa8e07", "171871": "1923123d32ea41d92b70a27a3f6ecf0763b56f6c", "173003": "a5317d67e6ce6e93de18011bfdcdd4ff7aa894cf", "173694": "79f2d3a179ac6ea6b4c3d07b6849afad4e8730cd", "175336": "5368d50428b30b7c9ccd038aec65d09252d16596", "176082": "8222c1cfc866126111f23bd9872998480cebf2c1", "176144": "919f693420e35d00c8d0a42100837ae3718f7927", "176370": "7462dcaae1e8cfe1dfd0c62dd6083f9749a9d827", "176371": "4c0b84bf2a714bcdd18da1f1f94d533d72399d52", "179467": "ce35e5c3a8efdb8161c6a85c8fb9ffb5bbdc9ffd", "180792": "ff68385595088304cf772086b9a259a65b007622", "181818": "957590ea15cc03ee2e00fc61934647d54836676f", "181820": "64918868e2154b06c7479347a59a4230f785e9fa", "181843": "3aa40c3ce9d16eae296f086bc4ac4d62deb2affc", "181855": "c256c071bb26e1e13b4666d1b3e229e110bc914a", "182051": "c2363d6d025981c661f8cbecf4c73ca7fbf38caf", "184654": "804ef7223ef08fd14c274b4a4044cc4aeee68863", "186032": "244b9d77fd42003042968a22d0cda6bea0c01435", "186957": "92a6bb06549e74a8bd8cdb8e28552496e5520007", "186971": "2a0f59ecfe64d4e7750e406f00f783ff4bd34631", "186973": "959e9b2a0c06df945f9fb66bd367af8832ca0d28", "187005": "3f878cff5b698b82eea85db2b60d65a2e320850e", "190978": "8727d035e7aa593720d16a5f57f70f3b5a93bd00", "191686": "ca9b0dfd6e01d691f8467ca1f68f6baaf538c6b4", "192507": "84326b3712ebc48827d7a0bce087c15ab6b389a6", "193142": "dd7b8a3c1714d0052ce4b4a2fd8dcef927439a24", "193143": "0516d4d8bced506cae97dc3cb45dbd2fe4311f26", "193203": "33ed2b11cb8e879d86c371700e6573db1814a69e", "193211": "8a20d54a3c1bfa38c03ea99a2ad3c1b0a45dfa95", "193660": "fa3dcb4eadd639abb116f2b8d3019e51064e45b1", "193699": "6b54e9fa35d6261adae9565f18cde359003b551b", "193701": "2ea19cbb575d076b4f521d3603211c8316ad5f8f", "193703": "d8ce9f9c301d021a69953134185ab728c1c248d3", "197104": "371c061252f993fc48f12a7ab3924debfe637b2a", "197292": "2070c4acbfcebcfd864b0b3083259107f1c68a83", "197391": "f7bd96e6d866a22f020bfade79ca1f14b76724bb", "197398": "99a1782a03f531879c402e6c7ef8595c1d1af460", "197544": "0622755c3b93668c9cffca6b79fd9e107d93065a", "197706": "c5e0032a1e9c1c74d7ff3659ea1ba3013294a25e", "197778": "5dd05fd5304ae9b2dd3e588a96e47238527f1fc5", "197804": "49f97f135a2e1d5d22e60d2a80ec668d53f9708a", "197810": "f9aa9e6b869c6f2f169a9c5c32932da4d0a4f490", "198480": "4bf2119f1d93411479981108dd0a3c3a46e8e3c4", "198907": "f082fa907cf1a8e127436f12c05dff97ba599e3a", "199276": "80a3dad21281cbb599f91e62aaac37c9409a65a8", "199409": "a73cc22ba39f89463d3e0910dd12d84dbf8596d2", "199413": "92a51d52ad199319e4f9de83fcbe970151dfed7e", "199418": "18960c44ad3f5219c22dca55f842912dbce78a07", "199553": "359c3cdfc5fabac82b3c70b3b6de2b0a8c16874f"}, "revision_to_date": {"19": 1447033308000, "276": 1449709229000, "2079": 1455136056000, "2335": 1455641879000, "2580": 1455954134000, "4563": 1460561179000, "4932": 1461358281000, "6517": 1465196204000, "7350": 1466544981000, "8713": 1469828084000, "10330": 1473371376000, "11537": 1475255746000, "12715": 1477008393000, "13320": 1477936537000, "13922": 1478729273000, "14978": 1480372279000, "15826": 1481345950000, "16263": 1482189490000, "16496": 1482673474000, "16923": 1484007471000, "17923": 1485457045000, "18595": 1486163580000, "19193": 1486571675000, "19471": 1486793348000, "21030": 1488919741000, "22171": 1490323875000, "22967": 1491329234000, "23663": 1492206071000, "24097": 1492736496000, "26244": 1495230580000, "26808": 1495823388000, "27441": 1496716492000, "28445": 1497466927000, "29612": 1498786464000, "30888": 1500495455000, "31537": 1501112856000, "32169": 1501792366000, "33312": 1502932832000, "36492": 1506448496000, "37669": 1507679141000, "38452": 1508541016000, "39324": 1509567673000, "42850": 1512706338000, "44785": 1514937643000, "45641": 1515803370000, "46933": 1516918930000, "48135": 1517776127000, "49003": 1518564007000, "50177": 1519843951000, "51264": 1520913758000, "51951": 1521575493000, "52011": 1521602918000, "52774": 1522297120000, "54090": 1523556454000, "55079": 1524153193000, "55960": 1524847009000, "55988": 1524848361000, "56550": 1525461214000, "59186": 1528322820000, "59902": 1528982667000, "61943": 1530569271000, "62467": 1531168705000, "64231": 1532134741000, "65243": 1532976395000, "66301": 1533685924000, "68638": 1535054324000, "70966": 1536707880000, "71435": 1536953887000, "72063": 1537467335000, "72746": 1537912252000, "74412": 1539023817000, "75796": 1539710063000, "77175": 1540524360000, "77928": 1541122510000, "88567": 1548237914000, "91103": 1549563592000, "92401": 1550191353000, "93927": 1551127024000, "95553": 1551822113000, "102693": 1555593358000, "102709": 1555608980000, "106284": 1558636408000, "107747": 1559890818000, "107868": 1559960600000, "108374": 1560428246000, "108801": 1560892817000, "109181": 1561135812000, "111426": 1563213113000, "115666": 1566495623000, "117179": 1567974292000, "117508": 1568223831000, "117906": 1568610045000, "118386": 1568929885000, "119161": 1569605425000, "119294": 1569886572000, "119959": 1570487798000, "120622": 1571087323000, "124541": 1574810890000, "125680": 1576016254000, "126831": 1576895238000, "127737": 1578416259000, "129321": 1579736637000, "129608": 1580011071000, "133806": 1583860732000, "134632": 1584572089000, "135373": 1585261159000, "136809": 1586559589000, "138423": 1588182202000, "139025": 1588710069000, "139623": 1589312783000, "139776": 1589422650000, "139858": 1589494891000, "143553": 1593146471000, "144516": 1594237899000, "145574": 1595015159000, "146246": 1595549353000, "151682": 1600739633000, "151684": 1600739687000, "151687": 1600739832000, "151688": 1600739837000, "151913": 1600903837000, "155079": 1604297919000, "155544": 1604713579000, "156293": 1605652793000, "156796": 1606185494000, "157465": 1607051390000, "158146": 1607737042000, "159224": 1609791522000, "159225": 1609791549000, "159226": 1609791574000, "159227": 1609791611000, "159228": 1609791631000, "160438": 1611188754000, "165819": 1617251050000, "166529": 1618245820000, "167525": 1619223180000, "168105": 1620171343000, "168847": 1620826001000, "171407": 1622845964000, "171594": 1623193394000, "171777": 1623349118000, "171871": 1623427783000, "173003": 1624926216000, "173694": 1625866199000, "175336": 1627950880000, "176082": 1628455794000, "176144": 1628536227000, "176370": 1628719604000, "176371": 1628719604000, "179467": 1633376191000, "180792": 1634700542000, "181818": 1635634716000, "181820": 1635634749000, "181843": 1635700205000, "181855": 1635730264000, "182051": 1635971642000, "184654": 1640138945000, "186032": 1642870636000, "186957": 1643502272000, "186971": 1643556467000, "186973": 1643557187000, "187005": 1643656653000, "190978": 1649350203000, "191686": 1650562205000, "192507": 1651681295000, "193142": 1652376450000, "193143": 1652376452000, "193203": 1652461889000, "193211": 1652465115000, "193660": 1653086686000, "193699": 1653257769000, "193701": 1653258269000, "193703": 1653258502000, "197104": 1659462885000, "197292": 1659648900000, "197391": 1659777174000, "197398": 1659862918000, "197544": 1660082135000, "197706": 1660253442000, "197778": 1660327093000, "197804": 1660402173000, "197810": 1660467724000, "198480": 1661189157000, "198907": 1661526321000, "199276": 1661967600000, "199409": 1662055492000, "199413": 1662056563000, "199418": 1662057287000, "199553": 1662159595000}, "params": {"arch": ["aarch64"], "cpu": [""], "machine": ["vim asv.conf.json"], "num_cpu": ["64"], "os": ["Linux 5.10.0-11-arm64"], "ram": ["131382292"], "python": ["3.9"], "wheel": ["", null], "h5py": ["", null], "cython": ["", null], "google": ["", null], "protobuf": ["", null], "pillow": ["", null], "scikit-build": ["", null], "branch": ["master"]}, "graph_param_list": [{"arch": "aarch64", "cpu": "", "machine": "vim asv.conf.json", "num_cpu": "64", "os": "Linux 5.10.0-11-arm64", "ram": "131382292", "python": "3.9", "branch": "master", "wheel": null, "h5py": null, "cython": null, "google": null, "protobuf": null, "pillow": null, "scikit-build": null}], "benchmarks": {"benchmarks.TensorflowMLPerfSuite.track_QPS_mobilenet": {"code": "class TensorflowMLPerfSuite:\n    def track_QPS_mobilenet(self):\n        out = subprocess.run(['bash /root/test/asv-test/run-mobilenet.sh'], shell=True, capture_output=True)\n        sout = out.stdout.decode(sys.stdout.encoding).split('\\n')\n        serr = out.stderr.decode(sys.stdout.encoding).split('\\n')\n        for i, line in enumerate(sout):\n            if 'qps=' in line:\n                result = re.search('qps=(.*?),', line)\n                finresult = result.group(1)\n                return float(finresult)\n        return 1.0\n\n    def setup_cache(self):\n        pass", "name": "benchmarks.TensorflowMLPerfSuite.track_QPS_mobilenet", "param_names": [], "params": [], "setup_cache_key": "benchmarks:8", "timeout": 1800, "type": "track", "unit": "qps", "version": "9d88a861d06892da5fbb26f1ba4fc5ce46256f2d8b313f2e9fc2825553220f48"}, "benchmarks.TensorflowMLPerfSuite.track_QPS_resnet50": {"code": "class TensorflowMLPerfSuite:\n    def track_QPS_resnet50(self):\n        out = subprocess.run(['bash /root/test/asv-test/run-resnet50.sh'], shell=True, capture_output=True)\n        sout = out.stdout.decode(sys.stdout.encoding).split('\\n')\n        serr = out.stderr.decode(sys.stdout.encoding).split('\\n')\n        for i, line in enumerate(sout):\n            if 'qps=' in line:\n                result = re.search('qps=(.*?),', line)\n                finresult = result.group(1)\n                return float(finresult)\n        return 1.0\n\n    def setup_cache(self):\n        pass", "name": "benchmarks.TensorflowMLPerfSuite.track_QPS_resnet50", "param_names": [], "params": [], "setup_cache_key": "benchmarks:8", "timeout": 1800, "type": "track", "unit": "qps", "version": "1f25b400d69a2468bccc46a5ef04d3113e0228c148da21f5732835982b03cc32"}, "imagebench.TensorflowImageClassification.track_image_classification": {"code": "class TensorflowImageClassification:\n    def track_image_classification(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/test/asv-test')\n        import tensorflow as tf\n        from functs import preprocess_image, load_image_from_url, load_image, show_image\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        if model == \"tp\":\n          os.environ['TF_ENABLE_ONEDNN_OPTS'] = \"1\"\n        else:\n          os.environ['TF_ENABLE_ONEDNN_OPTS'] = \"0\"\n    \n    \n        model_name = model\n        inter_op_threads = inter_list\n        intra_op_threads = intra_list\n        mb = batch_size\n        benchname = lib\n        print(\"*\"*150)\n        print(\"Model name =\", model_name, \" batch=\", mb, \" for \", benchname)\n        # Set TF threads\n        tf.config.threading.set_intra_op_parallelism_threads(intra_op_threads)\n        tf.config.threading.set_inter_op_parallelism_threads(inter_op_threads)\n        print(\"Inter threads = \", tf.config.threading.get_inter_op_parallelism_threads(), \"AND Intra threads = \", tf.config.threading.get_intra_op_parallelism_threads())\n        ############\n        original_image_cache = {}\n    \n        # # # #\n    \n        image_size = 224\n        dynamic_size = False\n    \n        model_handle_map = {\n          \"efficientnetv2-s\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_s/classification/2\",\n          \"efficientnetv2-m\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_m/classification/2\",\n          \"efficientnetv2-l\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_l/classification/2\",\n          \"efficientnetv2-s-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_s/classification/2\",\n          \"efficientnetv2-m-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_m/classification/2\",\n          \"efficientnetv2-l-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_l/classification/2\",\n          \"efficientnetv2-xl-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_xl/classification/2\",\n          \"efficientnetv2-b0-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_b0/classification/2\",\n          \"efficientnetv2-b1-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_b1/classification/2\",\n          \"efficientnetv2-b2-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_b2/classification/2\",\n          \"efficientnetv2-b3-21k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_b3/classification/2\",\n          \"efficientnetv2-s-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_s/classification/2\",\n          \"efficientnetv2-m-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_m/classification/2\",\n          \"efficientnetv2-l-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_l/classification/2\",\n          \"efficientnetv2-xl-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_xl/classification/2\",\n          \"efficientnetv2-b0-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_b0/classification/2\",\n          \"efficientnetv2-b1-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_b1/classification/2\",\n          \"efficientnetv2-b2-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_b2/classification/2\",\n          \"efficientnetv2-b3-21k-ft1k\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_b3/classification/2\",\n          \"efficientnetv2-b0\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_b0/classification/2\",\n          \"efficientnetv2-b1\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_b1/classification/2\",\n          \"efficientnetv2-b2\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_b2/classification/2\",\n          \"efficientnetv2-b3\": \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_b3/classification/2\",\n          \"efficientnet_b0\": \"https://tfhub.dev/tensorflow/efficientnet/b0/classification/1\",\n          \"efficientnet_b1\": \"https://tfhub.dev/tensorflow/efficientnet/b1/classification/1\",\n          \"efficientnet_b2\": \"https://tfhub.dev/tensorflow/efficientnet/b2/classification/1\",\n          \"efficientnet_b3\": \"https://tfhub.dev/tensorflow/efficientnet/b3/classification/1\",\n          \"efficientnet_b4\": \"https://tfhub.dev/tensorflow/efficientnet/b4/classification/1\",\n          \"efficientnet_b5\": \"https://tfhub.dev/tensorflow/efficientnet/b5/classification/1\",\n          \"efficientnet_b6\": \"https://tfhub.dev/tensorflow/efficientnet/b6/classification/1\",\n          \"efficientnet_b7\": \"https://tfhub.dev/tensorflow/efficientnet/b7/classification/1\",\n          \"bit_s-r50x1\": \"https://tfhub.dev/google/bit/s-r50x1/ilsvrc2012_classification/1\",\n          \"inception_v3\": \"https://tfhub.dev/google/imagenet/inception_v3/classification/4\",\n          \"inception_resnet_v2\": \"https://tfhub.dev/google/imagenet/inception_resnet_v2/classification/4\",\n          \"resnet_v1_50\": \"https://tfhub.dev/google/imagenet/resnet_v1_50/classification/4\",\n          \"resnet_v1_101\": \"https://tfhub.dev/google/imagenet/resnet_v1_101/classification/4\",\n          \"resnet_v1_152\": \"https://tfhub.dev/google/imagenet/resnet_v1_152/classification/4\",\n          \"resnet_v2_50\": \"https://tfhub.dev/google/imagenet/resnet_v2_50/classification/4\",\n          \"resnet_v2_101\": \"https://tfhub.dev/google/imagenet/resnet_v2_101/classification/4\",\n          \"resnet_v2_152\": \"https://tfhub.dev/google/imagenet/resnet_v2_152/classification/4\",\n          \"nasnet_large\": \"https://tfhub.dev/google/imagenet/nasnet_large/classification/4\",\n          \"nasnet_mobile\": \"https://tfhub.dev/google/imagenet/nasnet_mobile/classification/4\",\n          \"pnasnet_large\": \"https://tfhub.dev/google/imagenet/pnasnet_large/classification/4\",\n          \"mobilenet_v2_100_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4\",\n          \"mobilenet_v2_130_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4\",\n          \"mobilenet_v2_140_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/4\",\n          \"mobilenet_v3_small_100_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/classification/5\",\n          \"mobilenet_v3_small_075_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v3_small_075_224/classification/5\",\n          \"mobilenet_v3_large_100_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/classification/5\",\n          \"mobilenet_v3_large_075_224\": \"https://tfhub.dev/google/imagenet/mobilenet_v3_large_075_224/classification/5\",\n        }\n    \n    \n    \n        model_image_size_map = {\n          \"efficientnetv2-s\": 384,\n          \"efficientnetv2-m\": 480,\n          \"efficientnetv2-l\": 480,\n          \"efficientnetv2-b0\": 224,\n          \"efficientnetv2-b1\": 240,\n          \"efficientnetv2-b2\": 260,\n          \"efficientnetv2-b3\": 300,\n          \"efficientnetv2-s-21k\": 384,\n          \"efficientnetv2-m-21k\": 480,\n          \"efficientnetv2-l-21k\": 480,\n          \"efficientnetv2-xl-21k\": 512,\n          \"efficientnetv2-b0-21k\": 224,\n          \"efficientnetv2-b1-21k\": 240,\n          \"efficientnetv2-b2-21k\": 260,\n          \"efficientnetv2-b3-21k\": 300,\n          \"efficientnetv2-s-21k-ft1k\": 384,\n          \"efficientnetv2-m-21k-ft1k\": 480,\n          \"efficientnetv2-l-21k-ft1k\": 480,\n          \"efficientnetv2-xl-21k-ft1k\": 512,\n          \"efficientnetv2-b0-21k-ft1k\": 224,\n          \"efficientnetv2-b1-21k-ft1k\": 240,\n          \"efficientnetv2-b2-21k-ft1k\": 260,\n          \"efficientnetv2-b3-21k-ft1k\": 300,\n          \"efficientnet_b0\": 224,\n          \"efficientnet_b1\": 240,\n          \"efficientnet_b2\": 260,\n          \"efficientnet_b3\": 300,\n          \"efficientnet_b4\": 380,\n          \"efficientnet_b5\": 456,\n          \"efficientnet_b6\": 528,\n          \"efficientnet_b7\": 600,\n          \"inception_v3\": 299,\n          \"inception_resnet_v2\": 299,\n          \"mobilenet_v2_100_224\": 224,\n          \"mobilenet_v2_130_224\": 224,\n          \"mobilenet_v2_140_224\": 224,\n          \"nasnet_large\": 331,\n          \"nasnet_mobile\": 224,\n          \"pnasnet_large\": 331,\n          \"resnet_v1_50\": 224,\n          \"resnet_v1_101\": 224,\n          \"resnet_v1_152\": 224,\n          \"resnet_v2_50\": 224,\n          \"resnet_v2_101\": 224,\n          \"resnet_v2_152\": 224,\n          \"mobilenet_v3_small_100_224\": 224,\n          \"mobilenet_v3_small_075_224\": 224,\n          \"mobilenet_v3_large_100_224\": 224,\n          \"mobilenet_v3_large_075_224\": 224,\n        }\n    \n    \n        model_handle = model_handle_map[model_name]\n    \n        print(f\"Selected model: {model_name} : {model_handle}\")\n    \n    \n        max_dynamic_size = 512\n        if model_name in model_image_size_map:\n          image_size = model_image_size_map[model_name]\n          dynamic_size = False\n          print(f\"Images will be converted to {image_size}x{image_size}\")\n        else:\n          dynamic_size = True\n          print(f\"Images will be capped to a max size of {max_dynamic_size}x{max_dynamic_size}\")\n    \n        labels_file = \"https://storage.googleapis.com/download.tensorflow.org/data/ImageNetLabels.txt\"\n    \n        #download labels and creates a maps\n        downloaded_file = tf.keras.utils.get_file(\"labels.txt\", origin=labels_file)\n    \n        classes = []\n    \n        with open(downloaded_file) as f:\n          labels = f.readlines()\n          classes = [l.strip() for l in labels]\n    \n        \"\"\"You can select one of the images below, or use your own image. Just remember that the input size for the models vary and some of them use a dynamic input size (enabling inference on the unscaled image). Given that, the method `load_image` will already rescale the image to the expected format.\"\"\"\n    \n        #@title Select an Input Image\n    \n        image_name = \"turtle\" # @param ['tiger', 'bus', 'car', 'cat', 'dog', 'apple', 'banana', 'turtle', 'flamingo', 'piano', 'honeycomb', 'teapot']\n    \n        images_for_test_map = {\n            \"tiger\": \"https://upload.wikimedia.org/wikipedia/commons/b/b0/Bengal_tiger_%28Panthera_tigris_tigris%29_female_3_crop.jpg\",\n            #by Charles James Sharp, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons\n            \"bus\": \"https://upload.wikimedia.org/wikipedia/commons/6/63/LT_471_%28LTZ_1471%29_Arriva_London_New_Routemaster_%2819522859218%29.jpg\",\n            #by Martin49 from London, England, CC BY 2.0 <https://creativecommons.org/licenses/by/2.0>, via Wikimedia Commons\n            \"car\": \"https://upload.wikimedia.org/wikipedia/commons/4/49/2013-2016_Toyota_Corolla_%28ZRE172R%29_SX_sedan_%282018-09-17%29_01.jpg\",\n            #by EurovisionNim, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons\n            \"cat\": \"https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_November_2010-1a.jpg\",\n            #by Alvesgaspar, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons\n            \"dog\": \"https://upload.wikimedia.org/wikipedia/commons/archive/a/a9/20090914031557%21Saluki_dog_breed.jpg\",\n            #by Craig Pemberton, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons\n            \"apple\": \"https://upload.wikimedia.org/wikipedia/commons/1/15/Red_Apple.jpg\",\n            #by Abhijit Tembhekar from Mumbai, India, CC BY 2.0 <https://creativecommons.org/licenses/by/2.0>, via Wikimedia Commons\n            \"banana\": \"https://upload.wikimedia.org/wikipedia/commons/1/1c/Bananas_white_background.jpg\",\n            #by fir0002  flagstaffotos [at] gmail.com\t\tCanon 20D + Tamron 28-75mm f/2.8, GFDL 1.2 <http://www.gnu.org/licenses/old-licenses/fdl-1.2.html>, via Wikimedia Commons\n            \"turtle\": \"https://upload.wikimedia.org/wikipedia/commons/8/80/Turtle_golfina_escobilla_oaxaca_mexico_claudio_giovenzana_2010.jpg\",\n            #by Claudio Giovenzana, CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons\n            \"flamingo\": \"https://upload.wikimedia.org/wikipedia/commons/b/b8/James_Flamingos_MC.jpg\",\n            #by Christian Mehlf\u00fchrer, User:Chmehl, CC BY 3.0 <https://creativecommons.org/licenses/by/3.0>, via Wikimedia Commons\n            \"piano\": \"https://upload.wikimedia.org/wikipedia/commons/d/da/Steinway_%26_Sons_upright_piano%2C_model_K-132%2C_manufactured_at_Steinway%27s_factory_in_Hamburg%2C_Germany.png\",\n            #by \"Photo: \u00a9 Copyright Steinway & Sons\", CC BY-SA 3.0 <https://creativecommons.org/licenses/by-sa/3.0>, via Wikimedia Commons\n            \"honeycomb\": \"https://upload.wikimedia.org/wikipedia/commons/f/f7/Honey_comb.jpg\",\n            #by Merdal, CC BY-SA 3.0 <http://creativecommons.org/licenses/by-sa/3.0/>, via Wikimedia Commons\n            \"teapot\": \"https://upload.wikimedia.org/wikipedia/commons/4/44/Black_tea_pot_cropped.jpg\",\n            #by Mendhak, CC BY-SA 2.0 <https://creativecommons.org/licenses/by-sa/2.0>, via Wikimedia Commons\n        }\n    \n        img_url = images_for_test_map[image_name]\n        image, original_image = load_image(img_url, image_size, dynamic_size, max_dynamic_size)\n        show_image(image, 'Scaled image')\n    \n        \"\"\"Now that the model was chosen, loading it with TensorFlow Hub is simple.\n        This also calls the model with a random input as a \"warmup\" run. Subsequent calls are often much faster, and you can compare this with the latency below.\n        *Note:* models that use a dynamic size might need a fresh \"warmup\" run for each image size.\n        \"\"\"\n    \n        # Commented out IPython magic to ensure Python compatibility.\n        classifier = hub.load(model_handle)\n    \n        input_shape = image.shape\n        print(\"SHAPE BEFORE\", input_shape)\n        input_shape_final = (mb, input_shape[1], input_shape[2], input_shape[3])\n        print(\"SHAPE AFTER\", input_shape_final)\n        warmup_input = tf.random.uniform(input_shape_final, 0, 1.0)\n        warmup_logits = classifier(warmup_input).numpy()\n    \n        \"\"\"Everything is ready for inference. Here you can see the top 5 results from the model for the selected image.\"\"\"\n    \n        # Commented out IPython magic to ensure Python compatibility.\n        # Run model on image\n        inference_times = []\n        tries=5\n        for _ in range(tries):\n            start_time = time.time_ns()\n            probabilities = tf.nn.softmax(classifier(warmup_input)).numpy()\n            end_time = time.time_ns()\n            inference_time = np.round((end_time - start_time) / 1e6, 2)\n            inference_times.append(inference_time)\n            print('DONE,DONE', flush=True)\n        print(inference_times)\n        perf=np.min(inference_times)\n        print(\"Inference time:\", perf)\n        return perf\n        \"\"\"## Learn More\n        If you want to learn more and try how to do Transfer Learning with these models you can try this tutorial: [Transfer Learning for Image classification](https://www.tensorflow.org/hub/tutorials/tf2_image_retraining)\n        If you want to check on more image models you can check them out on [tfhub.dev](https://tfhub.dev/s?module-type=image-augmentation,image-classification,image-classification-logits,image-classifier,image-feature-vector,image-generator,image-object-detection,image-others,image-pose-detection,image-segmentation,image-style-transfer,image-super-resolution,image-rnn-agent)\n        \"\"\"", "name": "imagebench.TensorflowImageClassification.track_image_classification", "param_names": ["param1", "param2", "param3", "param4", "param5"], "params": [["'inception_v3'", "'nasnet_mobile'"], ["'tp'", "'eigen'"], ["16"], ["16"], ["1", "16", "32"]], "timeout": 1800, "type": "track", "unit": "Inference Time", "version": "893f53c8ddbf2ccf2435f1a587b7f91e75a524db445ffb1c9b31836a4bd414e0"}}, "machines": {"vim asv.conf.json": {"arch": "aarch64", "cpu": "", "machine": "vim asv.conf.json", "num_cpu": "64", "os": "Linux 5.10.0-11-arm64", "ram": "131382292", "version": 1}}, "tags": {"0.12.0-rc0": 14978, "0.12.0-rc1": 15826, "0.12.1": 16496, "0.5.0": 19, "0.6.0": 276, "tflite-v0.1.7": 55988, "v0.10.0": 10330, "v0.10.0rc0": 8713, "v0.11.0": 13922, "v0.11.0rc0": 11537, "v0.11.0rc1": 12715, "v0.11.0rc2": 13320, "v0.12.0": 16263, "v0.6.0": 2079, "v0.7.0": 2335, "v0.7.1": 2580, "v0.8.0": 4932, "v0.8.0rc0": 4563, "v0.9.0": 7350, "v0.9.0rc0": 6517, "v1.0.0": 19471, "v1.0.0-alpha": 16923, "v1.0.0-rc0": 17923, "v1.0.0-rc1": 18595, "v1.0.0-rc2": 19193, "v1.0.1": 21030, "v1.1.0": 24097, "v1.1.0-rc0": 22171, "v1.1.0-rc1": 22967, "v1.1.0-rc2": 23663, "v1.10.0": 66301, "v1.10.0-rc0": 64231, "v1.10.0-rc1": 65243, "v1.10.1": 68638, "v1.11.0": 72746, "v1.11.0-rc0": 70966, "v1.11.0-rc1": 71435, "v1.11.0-rc2": 72063, "v1.12.0": 77928, "v1.12.0-rc0": 74412, "v1.12.0-rc1": 75796, "v1.12.0-rc2": 77175, "v1.12.1": 102693, "v1.12.2": 102709, "v1.12.3": 109181, "v1.13.0-rc0": 88567, "v1.13.0-rc1": 91103, "v1.13.0-rc2": 92401, "v1.13.1": 93927, "v1.13.2": 111426, "v1.14.0": 108801, "v1.14.0-rc0": 106284, "v1.14.0-rc1": 107868, "v1.15.0": 120622, "v1.15.0-rc0": 117179, "v1.15.0-rc1": 117906, "v1.15.0-rc2": 119294, "v1.15.0-rc3": 119959, "v1.15.2": 129608, "v1.15.3": 139858, "v1.15.4": 151682, "v1.15.5": 159224, "v1.2.0": 28445, "v1.2.0-rc0": 26244, "v1.2.0-rc1": 26808, "v1.2.0-rc2": 27441, "v1.2.1": 29612, "v1.3.0": 33312, "v1.3.0-rc0": 30888, "v1.3.0-rc1": 31537, "v1.3.0-rc2": 32169, "v1.3.1": 36492, "v1.4.0": 39324, "v1.4.0-rc0": 37669, "v1.4.0-rc1": 38452, "v1.4.1": 42850, "v1.5.0": 46933, "v1.5.0-rc0": 44785, "v1.5.0-rc1": 45641, "v1.5.1": 51951, "v1.6.0": 50177, "v1.6.0-rc0": 48135, "v1.6.0-rc1": 49003, "v1.7.0": 52774, "v1.7.0-rc0": 51264, "v1.7.0-rc1": 52011, "v1.7.1": 56550, "v1.8.0": 55960, "v1.8.0-rc0": 54090, "v1.8.0-rc1": 55079, "v1.9.0": 62467, "v1.9.0-rc0": 59186, "v1.9.0-rc1": 59902, "v1.9.0-rc2": 61943, "v2.0.0": 119161, "v2.0.0-alpha0": 95553, "v2.0.0-beta0": 107747, "v2.0.0-beta1": 108374, "v2.0.0-rc0": 115666, "v2.0.0-rc1": 117508, "v2.0.0-rc2": 118386, "v2.0.1": 129321, "v2.0.2": 139623, "v2.0.3": 151684, "v2.0.4": 159225, "v2.1.0": 127737, "v2.1.0-rc0": 124541, "v2.1.0-rc1": 125680, "v2.1.0-rc2": 126831, "v2.1.1": 139776, "v2.1.2": 151913, "v2.1.3": 159226, "v2.1.4": 171594, "v2.10.0": 199553, "v2.10.0-rc0": 197104, "v2.10.0-rc1": 197778, "v2.10.0-rc2": 198480, "v2.10.0-rc3": 198907, "v2.2.0": 139025, "v2.2.0-rc0": 133806, "v2.2.0-rc1": 134632, "v2.2.0-rc2": 135373, "v2.2.0-rc3": 136809, "v2.2.0-rc4": 138423, "v2.2.1": 151687, "v2.2.2": 159227, "v2.2.3": 171777, "v2.3.0": 146246, "v2.3.0-rc0": 143553, "v2.3.0-rc1": 144516, "v2.3.0-rc2": 145574, "v2.3.1": 151688, "v2.3.2": 159228, "v2.3.3": 171407, "v2.3.4": 176370, "v2.4.0": 158146, "v2.4.0-rc0": 155079, "v2.4.0-rc1": 155544, "v2.4.0-rc2": 156293, "v2.4.0-rc3": 156796, "v2.4.0-rc4": 157465, "v2.4.1": 160438, "v2.4.2": 171871, "v2.4.3": 176371, "v2.4.4": 181820, "v2.5.0": 168847, "v2.5.0-rc0": 165819, "v2.5.0-rc1": 166529, "v2.5.0-rc2": 167525, "v2.5.0-rc3": 168105, "v2.5.1": 176082, "v2.5.2": 181818, "v2.5.3": 186973, "v2.6.0": 176144, "v2.6.0-rc0": 173003, "v2.6.0-rc1": 173694, "v2.6.0-rc2": 175336, "v2.6.1": 181843, "v2.6.2": 182051, "v2.6.3": 186957, "v2.6.4": 193203, "v2.6.5": 193699, "v2.7.0": 181855, "v2.7.0-rc0": 179467, "v2.7.0-rc1": 180792, "v2.7.1": 186971, "v2.7.2": 193142, "v2.7.3": 193660, "v2.7.4": 199409, "v2.8.0": 187005, "v2.8.0-rc0": 184654, "v2.8.0-rc1": 186032, "v2.8.1": 193143, "v2.8.2": 193701, "v2.8.3": 199413, "v2.9.0": 193211, "v2.9.0-rc0": 190978, "v2.9.0-rc1": 191686, "v2.9.0-rc2": 192507, "v2.9.1": 193703, "v2.9.2": 199418}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}