{
    "benchmarks.TensorflowMLPerfSuite.track_QPS_mobilenet": {
        "code": "class TensorflowMLPerfSuite:\n    def track_QPS_mobilenet(self):\n        out = subprocess.run(['bash /root/asv-test/run-mobilenet.sh'], shell=True, capture_output=True)\n        sout = out.stdout.decode(sys.stdout.encoding).split('\\n')\n        serr = out.stderr.decode(sys.stdout.encoding).split('\\n')\n        for i, line in enumerate(sout):\n            if 'qps=' in line:\n                result = re.search('qps=(.*?),', line)\n                finresult = result.group(1)\n                return float(finresult)\n        return 1.0\n\n    def setup_cache(self):\n        pass",
        "name": "benchmarks.TensorflowMLPerfSuite.track_QPS_mobilenet",
        "param_names": [],
        "params": [],
        "setup_cache_key": "benchmarks:8",
        "timeout": 1800,
        "type": "track",
        "unit": "qps",
        "version": "e36085212cfca0c99334f4c5d5900d8fc8eb2c47d25a484bdbd74410f7b3b045"
    },
    "benchmarks.TensorflowMLPerfSuite.track_QPS_resnet50": {
        "code": "class TensorflowMLPerfSuite:\n    def track_QPS_resnet50(self):\n        out = subprocess.run(['bash /root/asv-test/run-resnet50.sh'], shell=True, capture_output=True)\n        sout = out.stdout.decode(sys.stdout.encoding).split('\\n')\n        serr = out.stderr.decode(sys.stdout.encoding).split('\\n')\n        for i, line in enumerate(sout):\n            if 'qps=' in line:\n                result = re.search('qps=(.*?),', line)\n                finresult = result.group(1)\n                return float(finresult)\n        return 1.0\n\n    def setup_cache(self):\n        pass",
        "name": "benchmarks.TensorflowMLPerfSuite.track_QPS_resnet50",
        "param_names": [],
        "params": [],
        "setup_cache_key": "benchmarks:8",
        "timeout": 1800,
        "type": "track",
        "unit": "qps",
        "version": "38e208d190fe48ddddbb7b8f88310321d015d7af5c7c68d835f0653fa346979e"
    },
    "imagebench.TensorflowImageClassification.track_inception_v3": {
        "code": "class TensorflowImageClassification:\n    def track_inception_v3(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        return inference",
        "name": "imagebench.TensorflowImageClassification.track_inception_v3",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'inception_v3'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "918041344779944820e513a3ec8f4d2cf727c9bbafc3a02680d7d1adbf4dfbbb"
    },
    "imagebench.TensorflowImageClassification.track_nasnet_mobile": {
        "code": "class TensorflowImageClassification:\n    def track_nasnet_mobile(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        return inference",
        "name": "imagebench.TensorflowImageClassification.track_nasnet_mobile",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'nasnet_mobile'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "063a6943fe037e6a24bcad25217650e82a10ca6776cec9ab5127c5a5dc523b6c"
    },
    "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_1024x1024": {
        "code": "class TensorflowObjectDetection:\n    def track_centernet_hourglass104_1024x1024(self, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n    \n        from functs import load_image_into_numpy_array, run_object_detect_bench\n        import os\n        import pathlib\n    \n        import matplotlib\n        import matplotlib.pyplot as plt\n    \n        import io\n        import scipy.misc\n        import numpy as np\n        from six import BytesIO\n        from PIL import Image, ImageDraw, ImageFont\n        from six.moves.urllib.request import urlopen\n    \n        import tensorflow as tf\n        import tensorflow_hub as hub\n        ##########################\n        import time\n        import csv\n        import sys\n    \n        inference = run_object_detect_bench(self, \"CenterNet HourGlass104 1024x1024\", \"tp\", inter_list, intra_list, batch_size)\n        return inference",
        "name": "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_1024x1024",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4"
        ],
        "params": [
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "5bc8f635d6dca52ef552260b30b35becdcffeefea649a75695005c59dd5d9e34"
    },
    "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_keypoints_512x512": {
        "code": "class TensorflowObjectDetection:\n    def track_centernet_hourglass104_keypoints_512x512(self, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n    \n        from functs import load_image_into_numpy_array, run_object_detect_bench\n        import os\n        import pathlib\n    \n        import matplotlib\n        import matplotlib.pyplot as plt\n    \n        import io\n        import scipy.misc\n        import numpy as np\n        from six import BytesIO\n        from PIL import Image, ImageDraw, ImageFont\n        from six.moves.urllib.request import urlopen\n    \n        import tensorflow as tf\n        import tensorflow_hub as hub\n        ##########################\n        import time\n        import csv\n        import sys\n    \n        inference = run_object_detect_bench(self, \"CenterNet HourGlass104 Keypoints 512x512\", lib, inter_list, intra_list, batch_size)\n        return inference",
        "name": "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_keypoints_512x512",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4"
        ],
        "params": [
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "620d791f301fb11db6e25df9908a5b622fbf444d023a91279366fb65b0ebfe6c"
    },
    "version": 2
}