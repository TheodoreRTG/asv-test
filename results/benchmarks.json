{
    "2imagebench.TensorflowImageClassification.track_accuracy_bit_s_r50x1": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_bit_s_r50x1(self, accuracy):\n        acc_result = accuracy[\"bit_s-r50x1\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_bit_s_r50x1",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "f737fcf6e9ae78028e3bb5b266c39545de42012ed4e231f43b99bdfeb60fdd29"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b0": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b0(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b0\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b0",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "09a07e39859bf845ed365b779937e80db095af1a9f5ba6a6880a381614c1710b"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b1": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b1(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b1\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b1",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "8dd962c6630a7b2096656d60d5da0c0d6d12fcbc329e31378b43e9269f91b539"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b2": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b2(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b2\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b2",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "32b4e9c8ee462c6b77a1d3d00b45e0b963927b32ffe38e156ee6101973435ed4"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b3": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b3(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b3\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b3",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "d656b92efd7dcf93eb4fa2625cbe1a171112bd9ff57e440e814bc26703fa595d"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b4": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b4(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b4\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b4",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "c526f8f096d6fa7eda982321c8c64fdfe13ce5f4d0fecfab964216df10236875"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b5": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b5(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b5\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b5",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "e3e9a1b0b2a21ad863cd267f989d2594afbd5b02540e21f3b60c2fd22dd89069"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b6": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b6(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b6\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b6",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "88f442bbeec3f5ac86b5ba867ec8e136d91352bf8e5be9aff936a17960f839e8"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b7": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnet_b7(self, accuracy):\n        acc_result = accuracy[\"efficientnet_b7\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnet_b7",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "fc913f99bef22c786c07a7f6b593d7d1d5b30ac7fb8d2ac25acb1f7d5df31e18"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b2\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "d15b7020fe651e72c256ffda585328c27fde20cd8c14e021f3ba7517eae014e5"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b0": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b0(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b0\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b0",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "7f2e43beed5d89d6bc558aa6f41ef2b5e186528339b1116f208e651298e53a50"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b0_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b0_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b0-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b0_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "a3ef8fc33cab235437074cb52402976f524351f13d411aab21e460d90813a0b2"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b0_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b0_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b0-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b0_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "e8302bd69494da5f06a4789bea85524ca60f4c01394afb9f0c4dc5ec55536c59"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b1": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b1(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b1\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b1",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "268fa6e8af9428aa8ce541487039321b868d790e48af2eb9d0d1280e5aaebc2b"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b1_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b1_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b1-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b1_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "8ebc7b2223e84baa512acd84a3665525315861e4f46e202511bfbcf4b88b9ea7"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b1_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b1_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b1-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b1_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "b4616b8b8b4f91a966b07dcf9b1187299b628d99231c55e12ba48855c3995cd3"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b2_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b2_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b2-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b2_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "6b49a905efe4aec4889eb3f4a29c23dae9d9ab1afca9d1cb1e15a3631eef4818"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b2_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b2_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b2-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b2_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "405ab44100f241b3b233fcb3fa760f5da022d7e94f33e5370dd0904ccbc5fe23"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b3": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b3(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b3\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b3",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "640af09db8902015ee9426fcbd780fb0f3b8af18eba7a01e9b1a5684137e9c59"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b3_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b3_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b3-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b3_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "bafa2df8812b1d86ae1c1d8ffa5213f58e7aad42f2a10e25f979a44d62e42b9e"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b3_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_b3_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-b3-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_b3_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "da9ee551597c9591843b9f4900a9520cce91a730aed698e8caca70be0d23b4bc"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_l": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_l(self, accuracy):\n       acc_result = accuracy[\"efficientnetv2-l\"]\n       return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_l",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "db6e0c44f57e423b33bfeeebee3fc10b85d2f736ecd5fb49d0af3ad4d6fe803e"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_l_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_l_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-l-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_l_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "866bf2147cd053c5c8c1d55718d6b6d6d3fa50bfce922404b6717b8c69d21a4b"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_l_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_l_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-l-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_l_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "9899dd9d09256c270b456c045dd004196888c06ae7050aa10418f4ce54b4bdb4"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_m": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_m(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-m\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_m",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "8fdbf710868e79247f7445fd451f99d0674731a58890eb69c7a4517665464b6f"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_m_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_m_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-m-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_m_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "fa61f57ea309df5c778fd7abba54ef5e8b0cf2afbb7b2b025ba16935314a28df"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_m_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_m_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-m-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_m_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "f1a406b8c8ab09f3e7562385ec3403d50555b0a8762a61610e524d50fd024e35"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_s": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_s(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-s\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_s",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "7c027f3251e021ecfcd5b9012018aa9a977dea59c6e1fc46fc8746f0557fca65"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_s_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_s_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-s-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_s_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "724e941f4ccb074f0990c7c534bf58a37ff0a31e7a188a6b4152b98e4de64706"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_s_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_s_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-s-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_s_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "73ef1a12ec72564485a19d57f9b2e7c3ceaadb6fadbe286231a13f5f5ba17f7a"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_xl_21k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_xl_21k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-xl-21k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_xl_21k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "49b803f6f9e12c626d4e4daedacca9df2335a07c01fa92728fa2da6dd1f42ca9"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_xl_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_efficientnetv2_xl_21k_ft1k(self, accuracy):\n        acc_result = accuracy[\"efficientnetv2-xl-21k-ft1k\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_efficientnetv2_xl_21k_ft1k",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "bc6b0819dad709a41218444300b288046c594c183daf77d66fc3df8ef5b93c80"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_inception_resnet_v2": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_inception_resnet_v2(self, accuracy):\n        acc_result = accuracy[\"inception_resnet_v2\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_inception_resnet_v2",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "e6c4bf2d11a3124a284d78367d5f4014ad046efd6b612359e2793a82fc60cc43"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_inception_v3": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_inception_v3(self, accuracy):\n        acc_result = accuracy[\"inception_v3\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_inception_v3",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "2a315d101d16a6be6531e419e31e72f9660c7059e3e10ab631e4a330e246a8d6"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v2_100_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v2_100_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v2_100_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v2_100_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "1e9fc8d6a5f5e02e7d52d8ebc7bea8fe5efbde5c95786685977157e29fdefa1f"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v2_130_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v2_130_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v2_130_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v2_130_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "151661356a74aa96b2d5ea21995644c02599f8245a219df38b86d762964bf21f"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v2_140_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v2_140_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v2_140_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v2_140_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "31efad51191c6fae8fbb538dc4a348c857bee71cc9c7ecc0229c466b8493af87"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_large_075_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v3_large_075_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v3_large_075_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_large_075_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "2ebe4a86998462be330c7670bc156b78362fd191a70b45a24bb3c7cf550f9228"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_large_100_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v3_large_100_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v3_large_100_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_large_100_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "6f6f42c068b57c5ea118081e769f88cd380fe7053c2dc955fd5d36f196881a1d"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_small_075_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v3_small_075_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v3_small_075_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_small_075_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "9c0052e9f83b8eb73e6afa1b8121008c1a107bada2a8a37522e22e226daac10e"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_small_100_224": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_mobilenet_v3_small_100_224(self, accuracy):\n        acc_result = accuracy[\"mobilenet_v3_small_100_224\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_mobilenet_v3_small_100_224",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "79325737cdf37bad7a7fadcaad117b985bc4f2a0efaa7684292b8db798418cc8"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_nasnet_large": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_nasnet_large(self, accuracy):\n        acc_result = accuracy[\"nasnet_large\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_nasnet_large",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "5a600206ba88adab571d27481cc69ec43a2ef168a93f076fe5fc50f8286003c1"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_nasnet_mobile": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_nasnet_mobile(self, accuracy):\n        acc_result = accuracy[\"nasnet_mobile\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_nasnet_mobile",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "1aac8a00d04a8c1f286accf90aa64749bbf729b88186c4a3259cefa8a32c047a"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_pnasnet_large": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_pnasnet_large(self, accuracy):\n        acc_result = accuracy[\"pnasnet_large\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_pnasnet_large",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "8958bc0550f1015113b7a5caf15ab5a215ebdf52fe0ffd9414156ef19890aed5"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v1_101": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_resnet_v1_101(self, accuracy):\n        acc_result = accuracy[\"resnet_v1_101\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v1_101",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "7862b730c87e0af89ef21ac0e0c5a532adc05ad937719997e6140decc5ed576c"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v1_152": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_resnet_v1_152(self, accuracy):\n        acc_result = accuracy[\"resnet_v1_152\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v1_152",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "354e35e057fee5caf8e2ef730f4b3ea0c2c8c59867015dbacef67a4d2cba5ef1"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v1_50": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_resnet_v1_50(self, accuracy):\n        acc_result = accuracy[\"resnet_v1_50\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v1_50",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "c3921af5e9b0fb0879b389b0d23d9803e61e1e0388f32fcd7d3240f4e3ea904b"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v2_101": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_resnet_v2_101(self, accuracy):\n        acc_result = accuracy[\"resnet_v2_101\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v2_101",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "d8bceb29561dac35d4493408ae3a65dad77aa78df0c1403ef095d9471b0aff97"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v2_152": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_resnet_v2_152(self, accuracy):\n        acc_result = accuracy[\"resnet_v2_152\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v2_152",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "0243262a82e7994d6f120943ad9c154b667a727ef300f82a91687b1bb8543188"
    },
    "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v2_50": {
        "code": "class TensorflowImageClassification:\n    def track_accuracy_resnet_v2_50(self, accuracy):\n        acc_result = accuracy[\"resnet_v2_50\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_accuracy_resnet_v2_50",
        "param_names": [],
        "params": [],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "e6f0953681483b168e053eb80fd5d1202f428e47bac632cbd56f4563698c4f31"
    },
    "2imagebench.TensorflowImageClassification.track_bit_s_r50x1": {
        "code": "class TensorflowImageClassification:\n    def track_bit_s_r50x1(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_bit_s_r50x1",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'bit_s-r50x1'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "7c9338c59e2f539d6425021a195c136be2b4458f021e3d9703ea0392f36eff1b"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b0": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b0(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b0",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b0'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "f54e32367ae9735abc82618c1b70298814cc09fb0541055db661ae96eaf8cc43"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b1": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b1(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b1",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b1'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "b47007a099dfc930ea869cbda10c0d645b4bd68ee8aac679ec7b00a3a9abcfe4"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b2": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b2(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b2",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b2'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "88dbcf2f6ca0e177009ebaf67e894983bbf09c2b7dc817e670dd3e5a19d6b7c6"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b3": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b3(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b3",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b3'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "2fb3cd28b82ef946d477cb263509f6cee68666ff042263c2c33ce2071df4e15b"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b4": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b4(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b4",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b4'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "464abe1f3b9572a64113f068b071918a124e1fdba24605a961fa50a55aff6434"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b5": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b5(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b5",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b5'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "0e55aded08c95d2c0bfecb04c22849c213d52325efacf2983a0472f88d54328f"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b6": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b6(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b6",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b6'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "f49c9d841e87a5c53b20d5a98baf11098c77c4e098bee0e8682c687c79c55d05"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnet_b7": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnet_b7(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnet_b7",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnet_b7'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "16adbc5782ca465b193c6097b891ec657358e9cc4dcff64bb85711c4410653f8"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b0": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b0(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b0",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b0'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "6a937a0edd01230acf93bde31a944901b1a23b0a3938eb7535259111a56f556c"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b0_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b0_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b0_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b0-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "1b1c5d88fda380874f93aa1807f60064b0a7e61098b89937d323efda436a5585"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b0_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b0_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b0_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b0-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "1258765987dbea058528e5b54480b2cb7db6989af57bac3cfccd67996647b275"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b1": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b1(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b1",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b1'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "428e928f6949d47bb65f0fa100188a72672ed50cbeda6d3e29fdbd26a2c255a3"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b1_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b1_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b1_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b1-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "f258294a77118e096583c5e55df59cac8140ea575c7f1f1e26fe7e2d43766ec6"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b1_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b1_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b1_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b1-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "cda63f161f91ebb129a6f51df12e09805ac98a542046069316e21ca84be2fcee"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b2": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b2(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b2",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b2'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "d836dbf588f352a0b7f95b66da864ecf97b5f70a401b810d98f1f1c091a37655"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b2_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b2_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b2_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b2-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "5463b33d57a9e8d4e3ec4d8281c9c61592339ee04451796e8339289213c4fe87"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b2_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b2_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b2_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b2-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "ddf02d3c36e8a6e1dc7a3471e7623f21ae029da0cc2e23cc8f0e5841c74439b1"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b3": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b3(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b3",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b3'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "4b7a920c0953552bf61128c30c4588574ae7baa7465dcf90791d1076779ac003"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b3_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b3_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b3_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b3-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "ad4d4fba0e9541050b8d3daea0aa4538029bc6e99894444341ede0188e032e05"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_b3_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_b3_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_b3_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-b3-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "8853440d3c0f4f4e713d51d5d972758d0beb6af89f054920d50436d47950fd90"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_l": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_l(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_l",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2_l'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "3f3d487425d7a965132c196fc23b0c59f584d82aedb8835e614f670ecc7562de"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_l_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_l_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_l_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-l-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "cf3d91b1ad5575e9e179695b9d52e0b2f15bc36b14c0f8a8b924fb032140e2b9"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_l_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_l_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_l_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-l-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "4d4edc768e777c07ae22323b540cedd331c8b35f5ae1d9641dcfd7b125b12209"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_m": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_m(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_m",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-m'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "1d2f90822d2ccfce87a68fd12216a36f8f5d69c8633a3ba9e5c53835f6c2137f"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_m_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_m_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_m_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-m-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "5fe1bbcddce25b5d90f74dea90ea7953b5c3fb25556f47eaf50b2d84ce2f1ecf"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_m_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_m_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_m_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-m-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "68f946879fea0def2da43eab1637cc08be4d9c6aaf447bd1c7e655a729da2069"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_s": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_s(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_s",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-s'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "f352c002656559eb8bfee16c985edf391a0d4a0f93b29f092deaf5a4629ae81c"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_s_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_s_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_s_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-s-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "2017741126d83aff0e4776604011414e48755b6e0d8af7a529508a3c4f612747"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_s_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_s_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_s_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-s-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "e92eb1a8bc5c00f127e37d77242e77e9148ef2c1da74a74417d482022002306d"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_xl_21k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_xl_21k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_xl_21k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-xl-21k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "99afe98c33abeaab7ad683f3bd6fa718e90dda69cc3460da58934d9e3733591a"
    },
    "2imagebench.TensorflowImageClassification.track_efficientnetv2_xl_21k_ft1k": {
        "code": "class TensorflowImageClassification:\n    def track_efficientnetv2_xl_21k_ft1k(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_efficientnetv2_xl_21k_ft1k",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'efficientnetv2-xl-21k-ft1k'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "e6c6db13520c4626cfcb8831251e1a086f1d242e8be73d5a90a417228089b2d3"
    },
    "2imagebench.TensorflowImageClassification.track_inception_resnet_v2": {
        "code": "class TensorflowImageClassification:\n    def track_inception_resnet_v2(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_inception_resnet_v2",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'inception_resnet_v2'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "c6347fff2ff30d8f59c47aa6b8aa8404d5d2d168e1f806eb43255e45f6cc6896"
    },
    "2imagebench.TensorflowImageClassification.track_inception_v3": {
        "code": "class TensorflowImageClassification:\n    def track_inception_v3(self, model, lib, inter_list, intra_list, batch_size, accuracy):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_inception_v3",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'inception_v3'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "55786dbb8f1bd046d7a77a836128e6151970309623dc1b595abf7cf110623dbf"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v2_100_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v2_100_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v2_100_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v2_100_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "341e95c72dfb17f5e32eb737cf5e75f0618799058953b0c4a9b6a7b66dce8960"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v2_130_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v2_130_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v2_130_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v2_130_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "179fca5bf1ab26cece480492248662c47c28651348f871099394d049a2c14492"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v2_140_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v2_140_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v2_140_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v2_140_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "c46bf596390319aea74d5dbadd659bc3b05f579171e5cd005e84aa2908e080bd"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v3_large_075_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v3_large_075_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v3_large_075_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v3_large_075_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "a59d73cb3212cb638081ca46aed40ef2af17fbf59d86a9792846b5e01e14eedc"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v3_large_100_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v3_large_100_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v3_large_100_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v3_large_100_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "d0895a084992b5d61f729fd6e5fae5fe4a8ace0660e9443bb57cf576d28020cf"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v3_small_075_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v3_small_075_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v3_small_075_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v3_small_075_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "56e54c621bc6139a95f0ccc9f98e51c86a4e1dfad9ae588dec2a5ad1ff8f68d5"
    },
    "2imagebench.TensorflowImageClassification.track_mobilenet_v3_small_100_224": {
        "code": "class TensorflowImageClassification:\n    def track_mobilenet_v3_small_100_224(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_mobilenet_v3_small_100_224",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'mobilenet_v3_small_100_224'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "c439e10976d75fbadf45cb8fe6590fb6d2ee88498ecc511660661f1da6c734ad"
    },
    "2imagebench.TensorflowImageClassification.track_nasnet_large": {
        "code": "class TensorflowImageClassification:\n    def track_nasnet_large(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_nasnet_large",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'nasnet_large'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "ae84e33c8f80ba74991f6f6a53de006781f72c79a3eced2d27e050ca1aff5aa3"
    },
    "2imagebench.TensorflowImageClassification.track_nasnet_mobile": {
        "code": "class TensorflowImageClassification:\n    def track_nasnet_mobile(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_nasnet_mobile",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'nasnet_mobile'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "89e97411351695e632b791a9053ef99bf9d0a1ea9f385408475b0e0bd45ec423"
    },
    "2imagebench.TensorflowImageClassification.track_pnasnet_large": {
        "code": "class TensorflowImageClassification:\n    def track_pnasnet_large(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_pnasnet_large",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'pnasnet_large'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "265eb1e825e0cf1152c36a98c4dec10578796bf9dbc6216abad17fc86f80ff81"
    },
    "2imagebench.TensorflowImageClassification.track_resnet_v1_101": {
        "code": "class TensorflowImageClassification:\n    def track_resnet_v1_101(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_resnet_v1_101",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'resnet_v1_101'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "1c1b3367203ef34a7859c52d6e0e9cc1bbb6ad6ab2acbf2ec8807b4a424e51cb"
    },
    "2imagebench.TensorflowImageClassification.track_resnet_v1_152": {
        "code": "class TensorflowImageClassification:\n    def track_resnet_v1_152(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_resnet_v1_152",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'resnet_v1_152'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "949f20d683c48ea2456a831c0f73c74b2bacfad1df382f279121eb12d3cab9d9"
    },
    "2imagebench.TensorflowImageClassification.track_resnet_v1_50": {
        "code": "class TensorflowImageClassification:\n    def track_resnet_v1_50(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_resnet_v1_50",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'resnet_v1_50'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "fa603ab705493b55fcdd0cb73bedbecfaaaf329e97aa31f004606cb9e20457c9"
    },
    "2imagebench.TensorflowImageClassification.track_resnet_v2_101": {
        "code": "class TensorflowImageClassification:\n    def track_resnet_v2_101(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_resnet_v2_101",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'resnet_v2_101'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "1472c09829383124bc5e6abe4aa33779d0eca4d35eb8bbdbf2d09389031a8e3d"
    },
    "2imagebench.TensorflowImageClassification.track_resnet_v2_152": {
        "code": "class TensorflowImageClassification:\n    def track_resnet_v2_152(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_resnet_v2_152",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'resnet_v2_152'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "8026b976908a10562c33aec785805091860d0ae8501464016c73cf1600b8e1a3"
    },
    "2imagebench.TensorflowImageClassification.track_resnet_v2_50": {
        "code": "class TensorflowImageClassification:\n    def track_resnet_v2_50(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracy[model] = acc\n        return inference\n\n    def setup_cache(self):\n        accuracy = {\n            \"inception_v3\":0,\n            \"nasnet_mobile\":0,\n            \"efficientnetv2-m\":0,\n            \"efficientnetv2-l\":0,\n            \"efficientnetv2-s-21k\":0,\n            \"efficientnetv2-m-21k\":0,\n            \"efficientnetv2-l-21k\":0,\n            \"efficientnetv2-xl-21k\":0,\n            \"efficientnetv2-b0-21k\":0,\n            \"efficientnetv2-b1-21k\":0,\n            \"efficientnetv2-b2-21k\":0,\n            \"efficientnetv2-b3-21k\":0,\n            \"efficientnetv2-s-21k-ft1k\":0,\n            \"efficientnetv2-m-21k-ft1k\":0,\n            \"efficientnetv2-l-21k-ft1k\":0,\n            \"efficientnetv2-xl-21k-ft1k\":0,\n            \"efficientnetv2-b0-21k-ft1k\":0,\n            \"efficientnetv2-b1-21k-ft1k\":0,\n            \"efficientnetv2-b2-21k-ft1k\":0,\n            \"efficientnetv2-b3-21k-ft1k\":0,\n            \"efficientnetv2-b0\":0,\n            \"efficientnetv2-b1\":0,\n            \"efficientnetv2-b2\":0,\n            \"efficientnetv2-b3\":0,\n            \"efficientnet_b0\":0,\n            \"efficientnet_b1\":0,\n            \"efficientnet_b2\":0,\n            \"efficientnet_b3\":0,\n            \"efficientnet_b4\":0,\n            \"efficientnet_b5\":0,\n            \"efficientnet_b6\":0,\n            \"efficientnet_b7\":0,\n            \"bit_s-r50x1\":0,\n            \"inception_resnet_v2\":0,\n            \"resnet_v1_101\":0,\n            \"resnet_v1_152\":0,\n            \"resnet_v2_50\":0,\n            \"resnet_v2_101\":0,\n            \"resnet_v2_152\":0,\n            \"nasnet_large\":0,\n            \"pnasnet_large\":0,\n            \"mobilenet_v2_100_224\":0,\n            \"mobilenet_v2_130_224\":0,\n            \"mobilenet_v2_140_224\":0,\n            \"mobilenet_v3_small_100_224\":0,\n            \"mobilenet_v3_small_075_224\":0,\n            \"mobilenet_v3_large_100_224\":0,\n            \"mobilenet_v3_large_075_224\":0,\n        }\n        return accuracy",
        "name": "2imagebench.TensorflowImageClassification.track_resnet_v2_50",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'resnet_v2_50'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "setup_cache_key": "2imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "c7fc454440384b220c1bc2f8c770cb16fd1f3c983d4b0205b783a5d86fd9cba4"
    },
    "3imagebench.TensorflowImageClassification.track_inception_v3": {
        "code": "class TensorflowImageClassification:\n    def track_inception_v3(self, accuracy, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        inference = run_image_bench(self, model, lib, inter_list, intra_list, batch_size)\n        if batch_size == 1:\n            acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n            accuracyfin = dict()\n            accuracyfin[\"inception_v3\"] = acc\n            accuracy = accuracyfin\n            print(accuracyfin)\n            print(accuracy)\n            #setattr(self, 'accuracy[\"inception_v3\"]', acc)\n            #print(self.accuracy[\"inception_v3\"])\n        return inference, acc\n\n    def setup_cache(self):\n        accuracy = {\"inception_v3\":0,}\n        return accuracy",
        "name": "3imagebench.TensorflowImageClassification.track_inception_v3",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'inception_v3'"
            ],
            [
                "'tp'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1"
            ]
        ],
        "setup_cache_key": "3imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time, Accuracy",
        "version": "4a1ae49cd68d955d912738ffd7f943cb2f2ad2a2f245964a03b337bac4e750c2"
    },
    "3imagebench.TensorflowImageClassification.track_xaccuracy_inception_v3": {
        "code": "class TensorflowImageClassification:\n    def track_xaccuracy_inception_v3(self, accuracy):\n        #print(self.accuracy)\n        acc_result = accuracy[\"inception_v3\"]\n        return acc_result\n\n    def setup_cache(self):\n        accuracy = {\"inception_v3\":0,}\n        return accuracy",
        "name": "3imagebench.TensorflowImageClassification.track_xaccuracy_inception_v3",
        "param_names": [],
        "params": [],
        "setup_cache_key": "3imagebench:3",
        "timeout": 1800,
        "type": "track",
        "unit": "Accuracy",
        "version": "eabccbf6718988dc2b7b27a741863951ad159f00683da3508615a8e2920de9a4"
    },
    "accimagebench.TensorflowImageClassification.track_inception_v3": {
        "code": "class TensorflowImageClassification:\n    def track_inception_v3(self, model, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n        import tensorflow as tf\n        from functs import run_image_bench, run_image_bench_accuracy\n        import os\n    \n        import time\n        import csv\n        ##########\n        import tensorflow as tf\n        import tensorflow_hub as hub\n    \n        import requests\n        from PIL import Image\n        from io import BytesIO\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        import sys\n    \n        acc = run_image_bench_accuracy(self, model, lib, inter_list, intra_list, batch_size)\n        return acc",
        "name": "accimagebench.TensorflowImageClassification.track_inception_v3",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4",
            "param5"
        ],
        "params": [
            [
                "'inception_v3'"
            ],
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Accuracy",
        "version": "a8dfc53673f0dc3878f9a518023e6f82ef8b6b89c6ffeb3935a3eae14042410f"
    },
    "benchmarks.TensorflowMLPerfSuite.track_QPS_mobilenet": {
        "code": "class TensorflowMLPerfSuite:\n    def track_QPS_mobilenet(self):\n        out = subprocess.run(['bash /root/asv-test/run-mobilenet.sh'], shell=True, capture_output=True)\n        sout = out.stdout.decode(sys.stdout.encoding).split('\\n')\n        serr = out.stderr.decode(sys.stdout.encoding).split('\\n')\n        for i, line in enumerate(sout):\n            if 'qps=' in line:\n                result = re.search('qps=(.*?),', line)\n                finresult = result.group(1)\n                return float(finresult)\n        return 1.0\n\n    def setup_cache(self):\n        pass",
        "name": "benchmarks.TensorflowMLPerfSuite.track_QPS_mobilenet",
        "param_names": [],
        "params": [],
        "setup_cache_key": "benchmarks:8",
        "timeout": 1800,
        "type": "track",
        "unit": "qps",
        "version": "e36085212cfca0c99334f4c5d5900d8fc8eb2c47d25a484bdbd74410f7b3b045"
    },
    "benchmarks.TensorflowMLPerfSuite.track_QPS_resnet50": {
        "code": "class TensorflowMLPerfSuite:\n    def track_QPS_resnet50(self):\n        out = subprocess.run(['bash /root/asv-test/run-resnet50.sh'], shell=True, capture_output=True)\n        sout = out.stdout.decode(sys.stdout.encoding).split('\\n')\n        serr = out.stderr.decode(sys.stdout.encoding).split('\\n')\n        for i, line in enumerate(sout):\n            if 'qps=' in line:\n                result = re.search('qps=(.*?),', line)\n                finresult = result.group(1)\n                return float(finresult)\n        return 1.0\n\n    def setup_cache(self):\n        pass",
        "name": "benchmarks.TensorflowMLPerfSuite.track_QPS_resnet50",
        "param_names": [],
        "params": [],
        "setup_cache_key": "benchmarks:8",
        "timeout": 1800,
        "type": "track",
        "unit": "qps",
        "version": "38e208d190fe48ddddbb7b8f88310321d015d7af5c7c68d835f0653fa346979e"
    },
    "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_1024x1024": {
        "code": "class TensorflowObjectDetection:\n    def track_centernet_hourglass104_1024x1024(self, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n    \n        from functs import load_image_into_numpy_array, run_object_detect_bench\n        import os\n        import pathlib\n    \n        import matplotlib\n        import matplotlib.pyplot as plt\n    \n        import io\n        import scipy.misc\n        import numpy as np\n        from six import BytesIO\n        from PIL import Image, ImageDraw, ImageFont\n        from six.moves.urllib.request import urlopen\n    \n        import tensorflow as tf\n        import tensorflow_hub as hub\n        ##########################\n        import time\n        import csv\n        import sys\n    \n        inference = run_object_detect_bench(self, \"CenterNet HourGlass104 1024x1024\", \"tp\", inter_list, intra_list, batch_size)\n        return inference",
        "name": "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_1024x1024",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4"
        ],
        "params": [
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "5bc8f635d6dca52ef552260b30b35becdcffeefea649a75695005c59dd5d9e34"
    },
    "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_keypoints_512x512": {
        "code": "class TensorflowObjectDetection:\n    def track_centernet_hourglass104_keypoints_512x512(self, lib, inter_list, intra_list, batch_size):\n        import sys\n        sys.path.append('/root/asv-test')\n    \n        from functs import load_image_into_numpy_array, run_object_detect_bench\n        import os\n        import pathlib\n    \n        import matplotlib\n        import matplotlib.pyplot as plt\n    \n        import io\n        import scipy.misc\n        import numpy as np\n        from six import BytesIO\n        from PIL import Image, ImageDraw, ImageFont\n        from six.moves.urllib.request import urlopen\n    \n        import tensorflow as tf\n        import tensorflow_hub as hub\n        ##########################\n        import time\n        import csv\n        import sys\n    \n        inference = run_object_detect_bench(self, \"CenterNet HourGlass104 Keypoints 512x512\", lib, inter_list, intra_list, batch_size)\n        return inference",
        "name": "object_detection.TensorflowObjectDetection.track_centernet_hourglass104_keypoints_512x512",
        "param_names": [
            "param1",
            "param2",
            "param3",
            "param4"
        ],
        "params": [
            [
                "'tp'",
                "'eigen'"
            ],
            [
                "16"
            ],
            [
                "16"
            ],
            [
                "1",
                "16",
                "32"
            ]
        ],
        "timeout": 1800,
        "type": "track",
        "unit": "Inference Time",
        "version": "620d791f301fb11db6e25df9908a5b622fbf444d023a91279366fb65b0ebfe6c"
    },
    "version": 2
}